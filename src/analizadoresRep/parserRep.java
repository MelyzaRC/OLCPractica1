
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150930 (SVN rev 66)
//----------------------------------------------------

package analizadoresRep;

import java_cup.runtime.Symbol;
import almacenamiento.FuncionSubir;
import almacenamiento.Clave;
import almacenamiento.Archivo;
import almacenamiento.Variable;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import analizadores.parser;
import analizadores.scanner;
import java.io.StringReader;
import java.util.ArrayList;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartRenderingInfo;
import org.jfree.chart.ChartUtilities;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.entity.StandardEntityCollection;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import almacenamiento.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150930 (SVN rev 66) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parserRep extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parserRep() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parserRep(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parserRep(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\004\000\002\003\004\000\002\003\002" +
    "\000\002\011\007\000\002\012\005\000\002\012\003\000" +
    "\002\005\017\000\002\016\003\000\002\016\003\000\002" +
    "\015\003\000\002\015\003\000\002\015\003\000\002\004" +
    "\006\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\013\007\000\002\017\011\000\002\020\007\000\002\021" +
    "\011\000\002\022\015\000\002\023\015\000\002\007\003" +
    "\000\002\007\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\004\000\002\010\004\000\002\010\004\000\002" +
    "\010\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\016\002\ufffc\004\ufffc\006\ufffc\013\ufffc\015" +
    "\ufffc\016\ufffc\001\002\000\004\002\150\001\002\000\016" +
    "\002\000\004\015\006\007\013\016\015\011\016\012\001" +
    "\002\000\016\002\uffff\004\uffff\006\uffff\013\uffff\015\uffff" +
    "\016\uffff\001\002\000\004\035\ufff1\001\002\000\016\002" +
    "\ufffd\004\ufffd\006\ufffd\013\ufffd\015\ufffd\016\ufffd\001\002" +
    "\000\004\021\141\001\002\000\004\021\123\001\002\000" +
    "\016\002\ufffe\004\ufffe\006\ufffe\013\ufffe\015\ufffe\016\ufffe" +
    "\001\002\000\004\035\017\001\002\000\004\035\uffef\001" +
    "\002\000\004\035\ufff0\001\002\000\004\020\020\001\002" +
    "\000\016\005\026\007\033\010\022\011\025\012\035\014" +
    "\030\001\002\000\016\002\uffea\004\uffea\006\uffea\013\uffea" +
    "\015\uffea\016\uffea\001\002\000\004\021\117\001\002\000" +
    "\016\002\uffec\004\uffec\006\uffec\013\uffec\015\uffec\016\uffec" +
    "\001\002\000\016\002\uffed\004\uffed\006\uffed\013\uffed\015" +
    "\uffed\016\uffed\001\002\000\004\021\111\001\002\000\004" +
    "\021\105\001\002\000\016\002\uffeb\004\uffeb\006\uffeb\013" +
    "\uffeb\015\uffeb\016\uffeb\001\002\000\004\021\073\001\002" +
    "\000\016\002\uffee\004\uffee\006\uffee\013\uffee\015\uffee\016" +
    "\uffee\001\002\000\016\002\uffe9\004\uffe9\006\uffe9\013\uffe9" +
    "\015\uffe9\016\uffe9\001\002\000\004\021\065\001\002\000" +
    "\016\002\ufff2\004\ufff2\006\ufff2\013\ufff2\015\ufff2\016\ufff2" +
    "\001\002\000\004\021\036\001\002\000\004\035\037\001" +
    "\002\000\004\017\040\001\002\000\006\033\043\035\041" +
    "\001\002\000\006\017\uffe2\022\uffe2\001\002\000\004\017" +
    "\044\001\002\000\006\017\uffe1\022\uffe1\001\002\000\012" +
    "\020\046\024\050\025\051\026\047\001\002\000\004\017" +
    "\056\001\002\000\004\020\055\001\002\000\004\020\054" +
    "\001\002\000\006\017\uffe0\020\053\001\002\000\006\017" +
    "\uffdf\020\052\001\002\000\004\017\uffdd\001\002\000\004" +
    "\017\uffde\001\002\000\004\017\uffdb\001\002\000\004\017" +
    "\uffdc\001\002\000\010\033\062\034\060\035\057\001\002" +
    "\000\006\017\ufff3\022\ufff3\001\002\000\006\017\ufff5\022" +
    "\ufff5\001\002\000\004\022\063\001\002\000\006\017\ufff4" +
    "\022\ufff4\001\002\000\004\023\064\001\002\000\016\002" +
    "\uffe4\004\uffe4\006\uffe4\013\uffe4\015\uffe4\016\uffe4\001\002" +
    "\000\004\035\066\001\002\000\004\017\067\001\002\000" +
    "\006\033\043\035\041\001\002\000\004\022\071\001\002" +
    "\000\004\023\072\001\002\000\016\002\uffe7\004\uffe7\006" +
    "\uffe7\013\uffe7\015\uffe7\016\uffe7\001\002\000\004\035\074" +
    "\001\002\000\004\017\075\001\002\000\006\033\043\035" +
    "\041\001\002\000\004\017\077\001\002\000\012\020\046" +
    "\024\050\025\051\026\047\001\002\000\004\017\101\001" +
    "\002\000\010\033\062\034\060\035\057\001\002\000\004" +
    "\022\103\001\002\000\004\023\104\001\002\000\016\002" +
    "\uffe3\004\uffe3\006\uffe3\013\uffe3\015\uffe3\016\uffe3\001\002" +
    "\000\006\033\043\035\041\001\002\000\004\022\107\001" +
    "\002\000\004\023\110\001\002\000\016\002\uffe8\004\uffe8" +
    "\006\uffe8\013\uffe8\015\uffe8\016\uffe8\001\002\000\004\035" +
    "\112\001\002\000\004\017\113\001\002\000\006\033\043" +
    "\035\041\001\002\000\004\022\115\001\002\000\004\023" +
    "\116\001\002\000\016\002\uffe5\004\uffe5\006\uffe5\013\uffe5" +
    "\015\uffe5\016\uffe5\001\002\000\004\035\120\001\002\000" +
    "\004\022\121\001\002\000\004\023\122\001\002\000\016" +
    "\002\uffe6\004\uffe6\006\uffe6\013\uffe6\015\uffe6\016\uffe6\001" +
    "\002\000\006\033\126\035\124\001\002\000\006\017\ufff6" +
    "\022\ufff6\001\002\000\004\017\127\001\002\000\006\017" +
    "\ufff7\022\ufff7\001\002\000\006\033\126\035\124\001\002" +
    "\000\004\017\131\001\002\000\004\035\132\001\002\000" +
    "\004\017\133\001\002\000\006\033\126\035\124\001\002" +
    "\000\004\017\135\001\002\000\006\033\126\035\124\001" +
    "\002\000\004\022\137\001\002\000\004\023\140\001\002" +
    "\000\016\002\ufff8\004\ufff8\006\ufff8\013\ufff8\015\ufff8\016" +
    "\ufff8\001\002\000\010\033\062\034\060\035\057\001\002" +
    "\000\006\017\144\022\145\001\002\000\006\017\ufff9\022" +
    "\ufff9\001\002\000\010\033\062\034\060\035\057\001\002" +
    "\000\004\023\146\001\002\000\016\002\ufffb\004\ufffb\006" +
    "\ufffb\013\ufffb\015\ufffb\016\ufffb\001\002\000\006\017\ufffa" +
    "\022\ufffa\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\146\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\012\004\005\005\007\006\013\011\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\013\030\014\033\017\023\020\022\021\026" +
    "\022\020\023\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\067\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\075\001" +
    "\001\000\002\001\001\000\004\010\077\001\001\000\002" +
    "\001\001\000\004\015\101\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\124\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\133\001\001\000\002\001\001\000\004\016\135" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\141\015\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\146\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parserRep$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parserRep$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parserRep$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	//Codigo visible
    public String cadenaImprimir = "";
    public String archivoActual = "";
    public ArrayList<Errores> listaErrores = new ArrayList<Errores>();

    public int er = 0;
    public int enr = 0;

    public void syntax_error(Symbol s){
        //System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        er = er+1;
        Errores nuevoError = new Errores((s.left+1), (s.right+1), 2,s.value.toString(), "","", archivoActual);
        listaErrores.add(nuevoError);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        //System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        enr = enr +1;
        Errores nuevoError = new Errores((s.left+1), (s.right+1), 3,s.value.toString(), "","", archivoActual);
        listaErrores.add(nuevoError);
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parserRep$actions {


    //Codigo de acciones

		
    public String cadenaImpresion = "";

    public ArrayList<Variable> listaVariables = new ArrayList<Variable>();

    public String obtenerTexto(String ruta) {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        String ret = "";
        try {
            archivo = new File(ruta);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                ret = ret + linea + "\n";
            }
        } catch (Exception e) {
            System.out.println("No se encuentra el archivo, error de ejecución");
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                //e2.printStackTrace();
            }
        }
        return ret;
    }

    public boolean verificarVariable(String nombre_){
    	if(listaVariables.size() > 0){
    		for(int i = 0; i < listaVariables.size(); i++){
    			if(listaVariables.get(i).nombre.equals(nombre_)){
    				return true;
    			}
    		}
    	}
    	return false;
    }

    public boolean verificarClave(ArrayList<Clave> lista, String comparacion){
    	for(int i = 0; i< lista.size(); i++){
    		if(lista.get(i).nombre.equals(comparacion)){
    			return true;
    		}
    	}
    	return false;
    }

    public String crearSalida(ArrayList<Clave> claves, Object[] arreglo){
    	String salida = "\t{";
    	for(int i = 0; i < claves.size(); i++){
    		Clave cl = claves.get(i);
    		salida = salida + cl.nombre + ":";
    		if(cl.tipo == 0){
    			salida = salida + arreglo[i].toString();
    		}else if(cl.tipo == 1){
    			salida = salida + "\"" + arreglo[i].toString()+ "\" ";
    		}

    		if(i == claves.size()-1){
    			salida = salida + "}\n";
    		}else{
    			salida = salida + ", ";
    		}
    	}
    	return salida;
    }

    public int numeroClave(ArrayList<Clave> claves, String nombre){
    	if(claves.size() >0){
    		for(int i = 0; i < claves.size(); i++){
    			if(claves.get(i).nombre.equals(nombre)){
    				return i;
    			}
    		}
    	}
    	return 0;
    }

    public int tipoClave(ArrayList<Clave> claves, String nombre){
    	if(claves.size() >0){
    		for(int i = 0; i < claves.size(); i++){
    			if(claves.get(i).nombre.equals(nombre)){
    				return claves.get(i).tipo;
    			}
    		}
    	}
    	return -1;
    }


  private final parserRep parser;

  /** Constructor */
  CUP$parserRep$actions(parserRep parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parserRep$do_action_part00000000(
    int                        CUP$parserRep$act_num,
    java_cup.runtime.lr_parser CUP$parserRep$parser,
    java.util.Stack            CUP$parserRep$stack,
    int                        CUP$parserRep$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parserRep$result;

      /* select the action based on the action number */
      switch (CUP$parserRep$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)).value;
		RESULT = start_val;
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parserRep$parser.done_parsing();
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= INICIO 
            {
              Object RESULT =null;
		
        parser.cadenaImprimir = cadenaImpresion;
    
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INICIO DECLARACION 
            {
              Object RESULT =null;
		
                System.out.println("Declaración");
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= INICIO IMPRESION 
            {
              Object RESULT =null;
		
                System.out.println("Impresión");
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= INICIO GRAFICA 
            {
              Object RESULT =null;
		
                System.out.println("Gráfica");
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= 
            {
              Object RESULT =null;

              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("INICIO",1, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // IMPRESION ::= R_IMPRIMIR PARENTESISABRE LISTAEXPRESION PARENTESISCIERRA PUNTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
						System.out.println("Lo que saldría en la consola es:\n" + a);
						cadenaImpresion = cadenaImpresion + "\n" +a ;
				
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("IMPRESION",7, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LISTAEXPRESION ::= LISTAEXPRESION COMA VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		FuncionSubir b = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
											if(a != null && b != null){
												switch(b.tipo){
                					case 1:
                						Double db = Double.parseDouble(b.valor.toString());
                						RESULT = a + String.valueOf(db);
                					break;
                					case 2:
                						RESULT = a + b.valor.toString();
                					break;
                					case 3:
                						RESULT = null;
                					break;
                				}
											}else{
												System.out.println("nulo en Impresión");
											}
										
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESION",8, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LISTAEXPRESION ::= VALOR 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		FuncionSubir a = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		 
                			if(a != null){
                				switch(a.tipo){
                					case 1:
                						Double db = Double.parseDouble(a.valor.toString());
                						RESULT = String.valueOf(db);
                					break;
                					case 2:
                						RESULT = a.valor.toString();
                					break;
                					case 3:
                						//retornar archivo como claves y numero de registro
                						if(a != null){
                							Archivo retArchivo = (Archivo) a.valor;
                						String cadenaArchivo = "Claves[";
                						for(int i = 0; i < retArchivo.claves.size(); i++){
                							cadenaArchivo = cadenaArchivo + "\"" + retArchivo.claves.get(i).nombre + "\"";
                							if(i == retArchivo.claves.size()-1){
                								cadenaArchivo = cadenaArchivo;
                							}else{
                								cadenaArchivo = cadenaArchivo + ",";
                							}
                						}
                						cadenaArchivo = cadenaArchivo + "]\nNúmero de registros: ";
                						cadenaArchivo = cadenaArchivo + String.valueOf(retArchivo.registros.size());
                						RESULT = cadenaArchivo;
                						}
                					break;
                				}
                			}else{
                				RESULT = null;
                			}
                		
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("LISTAEXPRESION",8, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GRAFICA ::= R_GRAFICAR PARENTESISABRE NOMBRE COMA NOMBRE COMA ID COMA NOMBRE COMA NOMBRE PARENTESISCIERRA PUNTOCOMA 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-10)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-10)).right;
		FuncionSubir a = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-10)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).right;
		FuncionSubir b = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).right;
		FuncionSubir d = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		FuncionSubir e = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
						if(a.tipo == 2 && !a.valor.toString().equals("")){//verificando el nombre 
							if(b.tipo == 2 && !b.valor.toString().equals("")){//verificando el titulo
								if(verificarVariable(c)){
									for(int i = 0; i < listaVariables.size(); i++){
    								if(listaVariables.get(i).nombre.equals(c)){
    									if(listaVariables.get(i).tipo == 3){
    										Archivo aRE = (Archivo) listaVariables.get(i).valor;
    										ArrayList<Clave> cls = aRE.claves;
    										if(d.tipo == 2 && !d.valor.toString().equals("")){
    											if(verificarClave(cls, d.valor.toString())){
    												/*****************************************************/
    												if(e.tipo == 2 && !e.valor.toString().equals("")){
    													if(verificarClave(cls, e.valor.toString())){
    														if(tipoClave(cls, e.valor.toString())== 0){
    															System.out.println("Todo para la grafica está bien");
    														int indiceX = numeroClave(cls, e.valor.toString());
    														int indiceY = numeroClave(cls, d.valor.toString());
    														ArrayList<Object[]> datos = aRE.registros;
    														System.out.println("Indice x: " + indiceX + "  Indice y: " + indiceY);
    														try{
    															DefaultCategoryDataset dataset = new DefaultCategoryDataset();
    														if(datos.size() > 0 ){
    															for(int tmp = 0; tmp < datos.size(); tmp++){
    																Object[] tmpArreglo = datos.get(tmp);
    																Double ejeX = Double.parseDouble(tmpArreglo[indiceX].toString());
    																String ejeY = tmpArreglo[indiceY].toString();
    																dataset.setValue(ejeX, ejeY,ejeY);
    															}
    																JFreeChart chart = ChartFactory.createBarChart(
                											b.valor.toString(),
                											d.valor.toString(), 
                											e.valor.toString(), 
                											dataset, 
                											PlotOrientation.VERTICAL,
               												true, 
                											false, 
                											false
        														);
        														final ChartRenderingInfo info = new ChartRenderingInfo(new StandardEntityCollection());
            												final File file1 = new File("entradas/" + a.valor.toString() + ".jpg");
            												ChartUtilities.saveChartAsJPEG(file1, chart, 1300, 600, info);
    															}else{
    																System.out.println("No se han encontrado datos, la grafica no se creará");
    															}
    														}catch (Exception ex) {
    															System.out.println("No se ha podido generar la imagen");
        												}
    														}else{
    															System.out.println("Se debe tener una clave numerica ");
    														}
    													}else{
    														System.out.println("No existe la clave para valores y");
    													}
    												}else{
    													System.out.println("Error en valores y");
    												}
    											/*****************************************************/
    											}else{
    												System.out.println("No existe la clave para valores x -> " + d.valor.toString());
    											}
    										}else{
    											System.out.println("Error en valores x");
    										}
    									}else{
    										System.out.println("La variable no es de tipo archivo");
    									}
    									break;
    								}
    							}
								}else{
									System.out.println("No existe la variable especificada");
								}
							}else{
								System.out.println("Error en el titulo de la imagen");
							}	
						}else{
							System.out.println("Error en el nombre de la imagen");
						}
					
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("GRAFICA",3, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-12)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NOMBRE ::= CADENA 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
							if(!a.equals("")){
								FuncionSubir fs = new FuncionSubir(2, a.replace("\"", ""));
								RESULT = fs;
							}else{
								System.out.println("El titulo de la imagen no puede estar vacio");
								RESULT = null;
							}
						
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("NOMBRE",12, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NOMBRE ::= ID 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
        			if(listaVariables.size() >0){
        				for(int i = 0; i < listaVariables.size(); i++){
        					if(listaVariables.get(i).nombre.equals(a)){
        							FuncionSubir fs = new FuncionSubir(listaVariables.get(i).tipo, listaVariables.get(i).valor);
        							RESULT = fs;
        						break;
        					}
        				}
        			}else{
        				System.out.println("No existe la variable para el titulo");
        				RESULT = null;
        			}
        		
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("NOMBRE",12, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // VALOR ::= NUMERO 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
								FuncionSubir fn = new FuncionSubir(1, a);
								RESULT = fn;
						
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // VALOR ::= CADENA 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
								FuncionSubir fn = new FuncionSubir(2, a.replace("\"", ""));
								RESULT = fn;
						
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VALOR ::= ID 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
        				if(listaVariables.size() > 0){
        					for(int i = 0; i < listaVariables.size(); i++){
        						if(listaVariables.get(i).nombre.equals(a)){
        							FuncionSubir fn = new FuncionSubir(listaVariables.get(i).tipo, listaVariables.get(i).valor);
											RESULT = fn;
        						}
        					}	
        				}else{
        					RESULT = null;
        				}
						
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("VALOR",11, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= TIPO ID IGUAL FUNCION 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		FuncionSubir c = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                    if(a.equals(String.valueOf(c.tipo))){
                        switch(Integer.parseInt(a)){
                        	case 3:
                        		Archivo guardar = (Archivo) c.valor;
                        		Variable v = new Variable(Integer.parseInt(a), b, guardar);
                            	if(!verificarVariable(b)){
                               		listaVariables.add(v);
                               		System.out.println("Se ha guardado una variable de tipo archivo");
                            	}else{
                            		System.out.println("No ha guardado una variable de tipo archivo porque está repetida");
                            	}
                        		break;
                        	case 1:
                        		Double dGuardar = Double.parseDouble(c.valor.toString());
                        		Variable v2 = new Variable(Integer.parseInt(a), b, dGuardar);
                            	if(!verificarVariable(b)){
                               		listaVariables.add(v2);
                               		System.out.println("Se ha guardado una variable de tipo numerico");
                            	}else{
                            		System.out.println("No ha guardado una variable de tipo numerico porque está repetida");
                            	}
                        		break;
                        	case 2:
                        		Variable v3 = new Variable(Integer.parseInt(a), b, c.valor.toString());
                            	if(!verificarVariable(b)){
                               		listaVariables.add(v3);
                               		System.out.println("Se ha guardado una variable de tipo cadena");
                            	}else{
                            		System.out.println("No ha guardado una variable de tipo cadena porque está repetida");
                            	}
                        		break;
                        }
                    }else{
                        System.out.println("Incorrecto tipos");
                    }
                
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-3)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPO ::= R_NUMERICO 
            {
              String RESULT =null;
		 RESULT = "1"; 
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPO ::= R_CADENA 
            {
              String RESULT =null;
		 RESULT = "2"; 
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPO ::= R_ARCHIVO 
            {
              String RESULT =null;
		 RESULT = "3"; 
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("TIPO",4, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // FUNCION ::= F_LEER 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		Archivo a = (Archivo)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                FuncionSubir nL = new FuncionSubir(3, a);
                RESULT = nL;
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // FUNCION ::= F_SUMAR 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // FUNCION ::= F_CONTAR 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // FUNCION ::= F_PROMEDIO 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCION ::= F_CONTARSI 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= F_OBTENERSI 
            {
              FuncionSubir RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		
                FuncionSubir nL = new FuncionSubir(2, a);
                RESULT = nL;
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("FUNCION",10, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // F_LEER ::= R_LEERARCHIVO PARENTESISABRE RUTA PARENTESISCIERRA PUNTOCOMA 
            {
              Archivo RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
                Archivo rAr = new Archivo();  
                
                String texto = obtenerTexto(a);
                if(texto != ""){
                    try {
                        scanner scan = new scanner(new BufferedReader(new StringReader(texto)));
                        scan.listaErrores = parser.listaErrores;
                        scan.archivoActual = a;
                        parser parser1 = new parser(scan);
                        parser1.listaErrores = parser.listaErrores;
                        parser1.archivoActual = a;
                        parser1.parse();
                        if (parser1.enr == 0) {//quiere decir que no tuvo errores no recuperables o sea que si puede hacer el reporte
                            if (parser1.er != 0) {
                                System.out.println("Se han detectado errores, los mismos se han omitido.");
                            } else {
                                System.out.println("Se completó el análisis");
                                rAr.claves = parser1.listaC;
                                rAr.registros = parser1.listaR;
                            }
                        } else {
                            System.out.println("Se han detectado errores, no se ha podido recuperar.");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if(rAr.claves.size() > 0){
                        RESULT = rAr;
                    }else{
                        RESULT = null;
                    }
                }else{
                    System.out.println("No se pudo crear el archivo");
                    RESULT = null;
                }
                
            
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("F_LEER",9, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // F_SUMAR ::= R_SUMAR PARENTESISABRE ID COMA RUTA PARENTESISCIERRA PUNTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
				double res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									int indice = 0;
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											if(ar.claves.get(j).tipo == 0){
												indice = j;
												ArrayList<Object[]> regSum = ar.registros;
												for(int h = 0; h < regSum.size(); h++){
													Double su = Double.parseDouble(regSum.get(h)[indice].toString());
													res = res + su;
												}
											}else{
												System.out.println("La clave que intenta sumar no es de tipo numerico");
											}
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("La suma es: " + res);
				RESULT = String.valueOf(res);
			
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("F_SUMAR",13, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // F_CONTAR ::= R_CONTAR PARENTESISABRE ID PARENTESISCIERRA PUNTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
				int res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								res = ar.registros.size();
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("El numero de registros es: " + res);
				RESULT = String.valueOf(res);
			
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("F_CONTAR",14, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // F_PROMEDIO ::= R_PROMEDIO PARENTESISABRE ID COMA RUTA PARENTESISCIERRA PUNTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
				double res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									int indice = 0;
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											if(ar.claves.get(j).tipo == 0){
												indice = j;
												ArrayList<Object[]> regSum = ar.registros;
												for(int h = 0; h < regSum.size(); h++){
													Double su = Double.parseDouble(regSum.get(h)[indice].toString());
													res = res + su;
												}
												res = res / regSum.size();
											}else{
												System.out.println("La clave que intenta sumar no es de tipo numerico");
											}
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("El promedio es: " + res);
				RESULT = String.valueOf(res);
			
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("F_PROMEDIO",15, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // F_CONTARSI ::= R_CONTARSI PARENTESISABRE ID COMA RUTA COMA OP COMA VALOR PARENTESISCIERRA PUNTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		FuncionSubir d = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
				int res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											/********************************************************************/
											//encontre la clave que buscaba 
											int indice = j; 
											int tipoClave = ar.claves.get(j).tipo;
											int tipoOp = Integer.parseInt(c.toString());
											FuncionSubir valorSubido = d;
											if(valorSubido != null){
												if(tipoClave == 0){ // es un numerico
													switch(tipoOp){
														case 1: //>
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion > valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero > cadena");
															}
														break;
														case 2: //<
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion < valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero < cadena");
															}
														break;
														case 3: //>=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion >= valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero >= cadena");
															}
														break;
														case 4: //<=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion <= valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero <= cadena");
															}
														break;
														case 5: //==
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	System.out.println("comparando " + comparacion + " con "+ valorSubidoComparacion);
																	if(String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero == cadena");
															}
														break;
														case 6: //!=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(!String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero != cadena");
															}
														break;
													}
												}else if(tipoClave == 1){ // es de tipo cadena
													switch(tipoOp){
														case 1://>
															System.out.println("Error, no se puede comparar > con cadenas");
														break;
														case 2://<
															System.out.println("Error, no se puede comparar < con cadenas");
														break;
														case 3://>=
															System.out.println("Error, no se puede comparar >= con cadenas");
														break;
														case 4://<=
															System.out.println("Error, no se puede comparar <= con cadenas");
														break;
														case 5://==
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + 1;
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
														case 6://!=
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(!arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + 1;
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
													}
												}
											}else{
												System.out.println("Error, se subio un nulo a contarSi");
											}
											/********************************************************************/
											System.out.println("Está en el metodo contar si");
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("Numero de registros que coinciden: " + res);
				RESULT = String.valueOf(res);
			
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("F_CONTARSI",16, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-10)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // F_OBTENERSI ::= R_OBTENERSI PARENTESISABRE ID COMA RUTA COMA OP COMA VALOR PARENTESISCIERRA PUNTOCOMA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).right;
		FuncionSubir d = (FuncionSubir)((java_cup.runtime.Symbol) CUP$parserRep$stack.elementAt(CUP$parserRep$top-2)).value;
		
				String res = "[\n";
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											/********************************************************************/
											//encontre la clave que buscaba 
											int indice = j; 
											int tipoClave = ar.claves.get(j).tipo;
											int tipoOp = Integer.parseInt(c.toString());
											FuncionSubir valorSubido = d;
											if(valorSubido != null){
												if(tipoClave == 0){ // es un numerico
													switch(tipoOp){
														case 1: //>
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion > valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero > cadena");
															}
														break;
														case 2: //<
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion < valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero < cadena");
															}
														break;
														case 3: //>=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion >= valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero >= cadena");
															}
														break;
														case 4: //<=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion <= valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero <= cadena");
															}
														break;
														case 5: //==
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	System.out.println("comparando " + comparacion + " con "+ valorSubidoComparacion);
																	if(String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero == cadena");
															}
														break;
														case 6: //!=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(!String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero != cadena");
															}
														break;
													}
												}else if(tipoClave == 1){ // es de tipo cadena
													switch(tipoOp){
														case 1://>
															System.out.println("Error, no se puede comparar > con cadenas");
														break;
														case 2://<
															System.out.println("Error, no se puede comparar < con cadenas");
														break;
														case 3://>=
															System.out.println("Error, no se puede comparar >= con cadenas");
														break;
														case 4://<=
															System.out.println("Error, no se puede comparar <= con cadenas");
														break;
														case 5://==
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + crearSalida(ar.claves, arreglo);
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
														case 6://!=
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(!arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + crearSalida(ar.claves, arreglo);
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
													}
												}
											}else{
												System.out.println("Error, se subio un nulo a contarSi");
											}
											/********************************************************************/
											System.out.println("Está en el metodo contar si");
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				res = res + "]";
				System.out.println("Resultado:\n" + res);
				RESULT = res;
			
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("F_OBTENERSI",17, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-10)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RUTA ::= ID 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		 
        				if(listaVariables.size() > 0){
        					for(int i = 0; i < listaVariables.size(); i++){
        						if(listaVariables.get(i).nombre.equals(a)){
        							if(listaVariables.get(i).tipo == 1){
        								RESULT = listaVariables.get(i).valor.toString();
        							}else{
        								System.out.println("Devuelve un dato que no es cadena");
        							}
        							break;
        						}
        					}	
        				}else{
        					RESULT = null;
        				}
        
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("RUTA",5, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RUTA ::= CADENA 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parserRep$stack.peek()).value;
		 RESULT = a.replace("\"","");
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("RUTA",5, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // OP ::= MAYORQUE 
            {
              String RESULT =null;
		 RESULT = "1";
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("OP",6, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // OP ::= MENORQUE 
            {
              String RESULT =null;
		 RESULT = "2";
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("OP",6, ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // OP ::= MAYORQUE IGUAL 
            {
              String RESULT =null;
		 RESULT = "3";
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("OP",6, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OP ::= MENORQUE IGUAL 
            {
              String RESULT =null;
		 RESULT = "4";
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("OP",6, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OP ::= IGUAL IGUAL 
            {
              String RESULT =null;
		 RESULT = "5";
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("OP",6, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OP ::= NOIGUAL IGUAL 
            {
              String RESULT =null;
		 RESULT = "6";
              CUP$parserRep$result = parser.getSymbolFactory().newSymbol("OP",6, ((java_cup.runtime.Symbol)CUP$parserRep$stack.elementAt(CUP$parserRep$top-1)), ((java_cup.runtime.Symbol)CUP$parserRep$stack.peek()), RESULT);
            }
          return CUP$parserRep$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parserRep$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parserRep$do_action(
    int                        CUP$parserRep$act_num,
    java_cup.runtime.lr_parser CUP$parserRep$parser,
    java.util.Stack            CUP$parserRep$stack,
    int                        CUP$parserRep$top)
    throws java.lang.Exception
    {
              return CUP$parserRep$do_action_part00000000(
                               CUP$parserRep$act_num,
                               CUP$parserRep$parser,
                               CUP$parserRep$stack,
                               CUP$parserRep$top);
    }
}

}
