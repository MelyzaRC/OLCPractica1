//******************************************************************************
//**                       Importar paquetes                                  **
//******************************************************************************
package analizadores;
//******************************************************************************
//**                       Importar librería                                  **
//******************************************************************************
import java_cup.runtime.Symbol;
import almacenamiento.Clave;
import java.util.ArrayList;

//PARSER 
parser code
{:
    //Codigo visible
    public int er = 0;
    public int enr = 0;
    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        er = er+1;
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        enr = enr +1;
    }
:}

action code
{:
    //Codigo de acciones
    public String algo = "";
    public int dimension = 0;
    public int buscando = 0;
    public ArrayList<Clave> listaClaves = new ArrayList<Clave>();
    public ArrayList<Object[]> listaRegistros = new ArrayList<Object[]>();
    public ArrayList<String> temporal = new ArrayList<String>();
:}


//******************************************************************************
//**                     Seccion de terminales                                **
//******************************************************************************
terminal R_CLAVES, R_REGISTROS, CORCHETEABRE, CORCHETECIERRA, IGUAL, SPACE, ENTER, COMA, LLAVEABRE, LLAVECIERRA, COMENTARIOU, COMENTARIOM;
terminal String CADENA, NUMERICO;
//******************************************************************************
//**                     Seccion de no terminales                             **
//******************************************************************************
nonterminal S,INICIO, DEF_CLAVES, DEF_REGISTROS, LISTA_REGISTROS, SECCIONCLAVES;
nonterminal String TIPO;
//******************************************************************************
//**                       Inicio con:                                        **
//******************************************************************************
start with S;
//******************************************************************************
//**                            Reglas                                        **
//******************************************************************************
S::= INICIO
;

INICIO::=   SECCIONCLAVES R_REGISTROS IGUAL CORCHETEABRE DEF_REGISTROS CORCHETECIERRA
            {:
                String imprimir = "Fin del análisis";
                System.out.println(imprimir);
            :}
;

SECCIONCLAVES::=    R_CLAVES IGUAL CORCHETEABRE DEF_CLAVES CORCHETECIERRA
                    {:
                        if(listaClaves.size() > 0){
                            dimension = listaClaves.size();
                            temporal.clear();
                        }else{
                            System.out.println("Error, no se detectaron claves");
                            temporal.clear();
                        }
                    :}
;

DEF_CLAVES::=   DEF_CLAVES COMA CADENA:a
                {:
                    if(!a.equals("")){
                        String n = a;
                        String tmpW = "";
                        char[] nue = n.toCharArray();
                        for(int i = 1; i<nue.length-1; i++){
                            tmpW = tmpW + nue[i]; 
                        }
                        if(!tmpW.equals("")){
                            Clave newClave = new Clave(tmpW, 0);
                            listaClaves.add(newClave);
                        }else{
                            System.out.println("Error, el nombre de la clave está vacío");
                        }
                    }
                :}
            |   CADENA:b
                {:
                    String n = b;
                    String tmpW = "";
                    char[] nue = n.toCharArray();
                    for(int i = 1; i<nue.length-1; i++){
                        tmpW = tmpW + nue[i]; 
                    }
                    if(!tmpW.equals("")){
                        Clave newClave = new Clave(tmpW, 0);
                        listaClaves.add(newClave);
                    }else{
                        System.out.println("Error, el nombre de la clave está vacío");
                    }
                :}
;

DEF_REGISTROS::=    DEF_REGISTROS LLAVEABRE LISTA_REGISTROS LLAVECIERRA
                    {:
                        if(temporal.size() == dimension){
                            //si es la primera vez que asigne tipos
                            if(buscando == 0){
                                for(int i = 0; i < temporal.size(); i++){
                                    if(!temporal.get(i).equals("")){
                                        if(temporal.get(i).toCharArray()[0]== '"' &&temporal.get(i).toCharArray()[temporal.get(i).toCharArray().length -1] =='"'){
                                            listaClaves.get(i).tipo = 1;
                                        }else if(temporal.get(i).matches("[+-]?\\d*(\\.\\d+)?") && temporal.get(i).equals("")==false){
                                            listaClaves.get(i).tipo = 0;
                                        }else{
                                            System.out.println("Error no coincide con ningún tipo");
                                        }
                                    }
                                }
                                buscando = 1;
                            }
                            Object[] nAO = new Object[dimension];
                            for(int i = 0; i < dimension; i++){
                                if(listaClaves.get(i).tipo == 1){
                                    String formar = "";
                                    if(temporal.get(i).toCharArray()[0]== '"' &&temporal.get(i).toCharArray()[temporal.get(i).toCharArray().length -1] =='"'){
                                        for(int j = 1; j < temporal.get(i).toCharArray().length-1; j++){
                                            formar = formar + temporal.get(i).toCharArray()[j];
                                        }
                                        nAO[i] = formar;
                                    }else{
                                        System.out.println("Error, se esperaba una cadena");
                                    }
                                }else if(listaClaves.get(i).tipo == 0){
                                    if(temporal.get(i).matches("[+-]?\\d*(\\.\\d+)?") && temporal.get(i).equals("")==false){
                                        nAO[i] = temporal.get(i);
                                    }else{
                                        System.out.println("Error, se esperaba un tipo de dato numerico");
                                    }
                                }
                            }
                            temporal.clear();
                            listaRegistros.add(nAO);
                        }else{
                            System.out.println("Error, el número de claves no concuerda con el registro");
                        }
                        temporal.clear();
                    :}
                |   
;

LISTA_REGISTROS::=  LISTA_REGISTROS COMA TIPO:a
                    {:
                        temporal.add(a);
                    :}
                |   TIPO:b
                    {:
                        temporal.add(b);
                    :}
;

TIPO::=     NUMERICO:a
            {:
                RESULT = a;
            :}
        |   CADENA:b
            {:
                RESULT = b;
            :}
;