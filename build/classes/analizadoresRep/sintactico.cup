//******************************************************************************
//**                       Importar paquetes                                  **
//******************************************************************************
package analizadoresRep;


//******************************************************************************
//**                       Importar librería                                  **
//******************************************************************************
import java_cup.runtime.Symbol;
import almacenamiento.FuncionSubir;
import almacenamiento.Clave;
import almacenamiento.Archivo;
import almacenamiento.Variable;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import analizadores.parser;
import analizadores.scanner;
import java.io.StringReader;
import java.util.ArrayList;

//PARSER 
parser code
{:
	//Codigo visible
		public String cadenaImprimir = "";

    public int er = 0;
    public int enr = 0;

    public void syntax_error(Symbol s){
        System.out.println("Error R de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        er = er+1;
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error NR de sintaxis: "+ s.value +" Linea "+(s.left+1)+" columna "+(s.right+1) );
        enr = enr +1;
    }

:}

action code
{:
    //Codigo de acciones

		public String cadenaImpresion = "";

    public ArrayList<Variable> listaVariables = new ArrayList<Variable>();

    public String obtenerTexto(String ruta) {
        File archivo = null;
        FileReader fr = null;
        BufferedReader br = null;
        String ret = "";
        try {
            archivo = new File(ruta);
            fr = new FileReader(archivo);
            br = new BufferedReader(fr);
            String linea;
            while ((linea = br.readLine()) != null) {
                ret = ret + linea + "\n";
            }
        } catch (Exception e) {
            System.out.println("No se encuentra el archivo, error de ejecución");
        } finally {
            try {
                if (null != fr) {
                    fr.close();
                }
            } catch (Exception e2) {
                e2.printStackTrace();
            }
        }
        return ret;
    }

    public boolean verificarVariable(String nombre_){
    	if(listaVariables.size() > 0){
    		for(int i = 0; i < listaVariables.size(); i++){
    			if(listaVariables.get(i).nombre.equals(nombre_)){
    				return true;
    			}
    		}
    	}
    	return false;
    }

    public boolean verificarClave(ArrayList<Clave> lista, String comparacion){
    	for(int i = 0; i< lista.size(); i++){
    		if(lista.get(i).nombre.equals(comparacion)){
    			return true;
    		}
    	}
    	return false;
    }

    public String crearSalida(ArrayList<Clave> claves, Object[] arreglo){
    	String salida = "\t{";
    	for(int i = 0; i < claves.size(); i++){
    		Clave cl = claves.get(i);
    		salida = salida + cl.nombre + ":";
    		if(cl.tipo == 0){
    			salida = salida + arreglo[i].toString();
    		}else if(cl.tipo == 1){
    			salida = salida + "\"" + arreglo[i].toString()+ "\" ";
    		}

    		if(i == claves.size()-1){
    			salida = salida + "}\n";
    		}else{
    			salida = salida + ", ";
    		}
    	}
    	return salida;
    }

:}


//******************************************************************************
//**                     Seccion de terminales                                **
//******************************************************************************
terminal R_ARCHIVO, R_LEERARCHIVO, R_NUMERICO, R_SUMAR, R_CONTAR, R_PROMEDIO, R_CONTARSI, R_CADENA, R_OBTENERSI, R_IMPRIMIR, R_GRAFICAR, COMA, IGUAL, PARENTESISABRE, PARENTESISCIERRA, PUNTOCOMA, MAYORQUE, MENORQUE, NOIGUAL, SPACE, ENTER, COMENTARIOU, COMENTARIOM;
terminal String CADENA, NUMERO, ID;



//******************************************************************************
//**                     Seccion de no terminales                             **
//******************************************************************************
nonterminal S,INICIO, DECLARACION, GRAFICA, NOMBRE;
nonterminal String TIPO,RUTA, OP, IMPRESION, LISTAEXPRESION;
nonterminal Archivo F_LEER;
nonterminal FuncionSubir FUNCION, VALOR;
nonterminal String F_SUMAR, F_CONTAR, F_PROMEDIO, F_CONTARSI;
nonterminal String F_OBTENERSI;




//******************************************************************************
//**                       Inicio con:                                        **
//******************************************************************************
start with S;



//******************************************************************************
//**                            Reglas                                        **
//******************************************************************************
S::= INICIO
;

INICIO::=   INICIO DECLARACION
            {:
                System.out.println("Declaración");
            :}
            | INICIO IMPRESION
            {:
                System.out.println("Impresión");
            :}
            | INICIO GRAFICA
            {:
                System.out.println("Gráfica");
            :}
            |
;


IMPRESION::= R_IMPRIMIR PARENTESISABRE LISTAEXPRESION PARENTESISCIERRA PUNTOCOMA
				{:

				:}
;

LISTAEXPRESION::=   LISTAEXPRESION:a COMA VALOR:b
                |   VALOR:a
;

GRAFICA::= R_GRAFICAR PARENTESISABRE NOMBRE COMA NOMBRE COMA ID COMA NOMBRE COMA NOMBRE PARENTESISCIERRA PUNTOCOMA
;

NOMBRE::=   CADENA
        |   ID
;















DECLARACION::=  TIPO:a ID:b IGUAL FUNCION:c
                {:
                    if(a.equals(String.valueOf(c.tipo))){
                        switch(Integer.parseInt(a)){
                        	case 3:
                        		Archivo guardar = (Archivo) c.valor;
                        		Variable v = new Variable(Integer.parseInt(a), b, guardar);
                            	if(!verificarVariable(b)){
                               		listaVariables.add(v);
                               		System.out.println("Se ha guardado una variable de tipo archivo");
                            	}else{
                            		System.out.println("No ha guardado una variable de tipo archivo porque está repetida");
                            	}
                        		break;
                        	case 1:
                        		Double dGuardar = Double.parseDouble(c.valor.toString());
                        		Variable v2 = new Variable(Integer.parseInt(a), b, dGuardar);
                            	if(!verificarVariable(b)){
                               		listaVariables.add(v2);
                               		System.out.println("Se ha guardado una variable de tipo numerico");
                            	}else{
                            		System.out.println("No ha guardado una variable de tipo numerico porque está repetida");
                            	}
                        		break;
                        	case 2:
                        		Variable v3 = new Variable(Integer.parseInt(a), b, c.valor.toString());
                            	if(!verificarVariable(b)){
                               		listaVariables.add(v3);
                               		System.out.println("Se ha guardado una variable de tipo cadena");
                            	}else{
                            		System.out.println("No ha guardado una variable de tipo cadena porque está repetida");
                            	}
                        		break;
                        }
                    }else{
                        System.out.println("Incorrecto tipos");
                    }
                :}
;

TIPO::= R_NUMERICO
            {: RESULT = "1"; :}
        |   R_CADENA
            {: RESULT = "2"; :}
        |   R_ARCHIVO
            {: RESULT = "3"; :}
;

FUNCION::=  F_LEER:a
            {:
                FuncionSubir nL = new FuncionSubir(3, a);
                RESULT = nL;
            :}
        |   F_SUMAR:a
        		{:
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            :}
        |   F_CONTAR:a
        		{:
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            :}
        |   F_PROMEDIO:a
        		{:
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            :}
        |   F_CONTARSI:a
        		{:
                FuncionSubir nL = new FuncionSubir(1, a);
                RESULT = nL;
            :}
        |   F_OBTENERSI:a
        		{:
                FuncionSubir nL = new FuncionSubir(2, a);
                RESULT = nL;
            :}
;

F_LEER::=    R_LEERARCHIVO PARENTESISABRE RUTA:a PARENTESISCIERRA PUNTOCOMA
            {:
                Archivo rAr = new Archivo();  
                
                String texto = obtenerTexto(a);
                if(texto != ""){
                    try {
                        scanner scan = new scanner(new BufferedReader(new StringReader(texto)));
                        parser parser = new parser(scan);
                        parser.parse();
                        if (parser.enr == 0) {//quiere decir que no tuvo errores no recuperables o sea que si puede hacer el reporte
                            if (parser.er != 0) {
                                System.out.println("Se han detectado errores, los mismos se han omitido.");
                            } else {
                                System.out.println("Se completó el análisis");
                                rAr.claves = parser.listaC;
                                rAr.registros = parser.listaR;
                            }
                        } else {
                            System.out.println("Se han detectado errores, no se ha podido recuperar.");
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if(rAr.claves.size() > 0){
                        RESULT = rAr;
                    }else{
                        RESULT = null;
                    }
                }else{
                    System.out.println("No se pudo crear el archivo");
                    RESULT = null;
                }
                
            :}
;

F_SUMAR::=  R_SUMAR PARENTESISABRE ID:a COMA RUTA:b PARENTESISCIERRA PUNTOCOMA
			{:
				double res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									int indice = 0;
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											if(ar.claves.get(j).tipo == 0){
												indice = j;
												ArrayList<Object[]> regSum = ar.registros;
												for(int h = 0; h < regSum.size(); h++){
													Double su = Double.parseDouble(regSum.get(h)[indice].toString());
													res = res + su;
												}
											}else{
												System.out.println("La clave que intenta sumar no es de tipo numerico");
											}
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("La suma es: " + res);
				RESULT = String.valueOf(res);
			:}
;

F_CONTAR::= R_CONTAR PARENTESISABRE ID:a PARENTESISCIERRA PUNTOCOMA
			{:
				int res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								res = ar.registros.size();
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("El numero de registros es: " + res);
				RESULT = String.valueOf(res);
			:}
;

F_PROMEDIO::= R_PROMEDIO PARENTESISABRE ID:a COMA RUTA:b PARENTESISCIERRA PUNTOCOMA
			{:
				double res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									int indice = 0;
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											if(ar.claves.get(j).tipo == 0){
												indice = j;
												ArrayList<Object[]> regSum = ar.registros;
												for(int h = 0; h < regSum.size(); h++){
													Double su = Double.parseDouble(regSum.get(h)[indice].toString());
													res = res + su;
												}
												res = res / regSum.size();
											}else{
												System.out.println("La clave que intenta sumar no es de tipo numerico");
											}
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("El promedio es: " + res);
				RESULT = String.valueOf(res);
			:}
;

F_CONTARSI::= R_CONTARSI PARENTESISABRE ID:a COMA RUTA:b COMA OP:c COMA VALOR:d PARENTESISCIERRA PUNTOCOMA
			{:
				int res = 0;
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											/********************************************************************/
											//encontre la clave que buscaba 
											int indice = j; 
											int tipoClave = ar.claves.get(j).tipo;
											int tipoOp = Integer.parseInt(c.toString());
											FuncionSubir valorSubido = d;
											if(valorSubido != null){
												if(tipoClave == 0){ // es un numerico
													switch(tipoOp){
														case 1: //>
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion > valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero > cadena");
															}
														break;
														case 2: //<
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion < valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero < cadena");
															}
														break;
														case 3: //>=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion >= valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero >= cadena");
															}
														break;
														case 4: //<=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion <= valorSubidoComparacion){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero <= cadena");
															}
														break;
														case 5: //==
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	System.out.println("comparando " + comparacion + " con "+ valorSubidoComparacion);
																	if(String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero == cadena");
															}
														break;
														case 6: //!=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(!String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res +1;
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero != cadena");
															}
														break;
													}
												}else if(tipoClave == 1){ // es de tipo cadena
													switch(tipoOp){
														case 1://>
															System.out.println("Error, no se puede comparar > con cadenas");
														break;
														case 2://<
															System.out.println("Error, no se puede comparar < con cadenas");
														break;
														case 3://>=
															System.out.println("Error, no se puede comparar >= con cadenas");
														break;
														case 4://<=
															System.out.println("Error, no se puede comparar <= con cadenas");
														break;
														case 5://==
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + 1;
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
														case 6://!=
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(!arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + 1;
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
													}
												}
											}else{
												System.out.println("Error, se subio un nulo a contarSi");
											}
											/********************************************************************/
											System.out.println("Está en el metodo contar si");
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				System.out.println("Numero de registros que coinciden: " + res);
				RESULT = String.valueOf(res);
			:}
;

F_OBTENERSI::= R_OBTENERSI PARENTESISABRE ID:a COMA RUTA:b COMA OP:c COMA VALOR:d PARENTESISCIERRA PUNTOCOMA
			{:
				String res = "[\n";
				if(verificarVariable(a)){
					for(int i = 0; i < listaVariables.size(); i++){
						if(listaVariables.get(i).nombre.equals(a)){
							if(listaVariables.get(i).tipo == 3){
								Archivo ar = (Archivo) listaVariables.get(i).valor;
								if(verificarClave(ar.claves, b)){
									for(int j = 0; j < ar.claves.size(); j++){
										if(ar.claves.get(j).nombre.equals(b)){
											/********************************************************************/
											//encontre la clave que buscaba 
											int indice = j; 
											int tipoClave = ar.claves.get(j).tipo;
											int tipoOp = Integer.parseInt(c.toString());
											FuncionSubir valorSubido = d;
											if(valorSubido != null){
												if(tipoClave == 0){ // es un numerico
													switch(tipoOp){
														case 1: //>
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion > valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero > cadena");
															}
														break;
														case 2: //<
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion < valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero < cadena");
															}
														break;
														case 3: //>=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion >= valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero >= cadena");
															}
														break;
														case 4: //<=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(comparacion <= valorSubidoComparacion){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero <= cadena");
															}
														break;
														case 5: //==
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	System.out.println("comparando " + comparacion + " con "+ valorSubidoComparacion);
																	if(String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero == cadena");
															}
														break;
														case 6: //!=
															if(valorSubido.tipo == 1){//es numero
																ArrayList<Object[]> listaR = ar.registros;
																for(int h = 0; h < listaR.size(); h++){
																	Double comparacion = Double.parseDouble(listaR.get(h)[indice].toString());
																	Double valorSubidoComparacion = Double.parseDouble(valorSubido.valor.toString());
																	if(!String.valueOf(comparacion).equals(String.valueOf(valorSubidoComparacion))){
																		res = res + crearSalida(ar.claves, listaR.get(h));
																	}
																}
															}else if(valorSubido.tipo == 2){//es cadena
																System.out.println("Error, No puede comparar numero != cadena");
															}
														break;
													}
												}else if(tipoClave == 1){ // es de tipo cadena
													switch(tipoOp){
														case 1://>
															System.out.println("Error, no se puede comparar > con cadenas");
														break;
														case 2://<
															System.out.println("Error, no se puede comparar < con cadenas");
														break;
														case 3://>=
															System.out.println("Error, no se puede comparar >= con cadenas");
														break;
														case 4://<=
															System.out.println("Error, no se puede comparar <= con cadenas");
														break;
														case 5://==
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + crearSalida(ar.claves, arreglo);
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
														case 6://!=
															if(valorSubido.tipo == 2){//es cadena
																for(int h = 0; h < ar.registros.size(); h++){
																	Object[] arreglo = ar.registros.get(h);
																	System.out.println("Comparando " + arreglo[indice].toString()+" con " + valorSubido.valor.toString());
																	if(!arreglo[indice].toString().equals(valorSubido.valor.toString())){
																		res = res + crearSalida(ar.claves, arreglo);
																	}
																}
															}else{//es numero
																System.out.println("Error, no se puede comparar cadena == numero");
															}
														break;
													}
												}
											}else{
												System.out.println("Error, se subio un nulo a contarSi");
											}
											/********************************************************************/
											System.out.println("Está en el metodo contar si");
											break;
										}
									}
								}else{
									System.out.println("La clave buscada no existe");
								}
							}else{
								System.out.println("La variable no es de tipo archivo");
							}
							break;
						}
					}
				}else{
					System.out.println("La variable " + a + " no existe");
				}
				res = res + "]";
				System.out.println("Resultado:\n" + res);
				RESULT = res;
			:}
;

RUTA::= ID:a
        {: 
        				if(listaVariables.size() > 0){
        					for(int i = 0; i < listaVariables.size(); i++){
        						if(listaVariables.get(i).nombre.equals(a)){
        							if(listaVariables.get(i).tipo == 1){
        								RESULT = listaVariables.get(i).valor.toString();
        							}else{
        								System.out.println("Devuelve un dato que no es cadena");
        							}
        							break;
        						}
        					}	
        				}else{
        					RESULT = null;
        				}
        :}
    |   CADENA:a
        {: RESULT = a.replace("\"","");:}
;

OP::=   MAYORQUE				{: RESULT = "1";:}
    |   MENORQUE				{: RESULT = "2";:}
    |   MAYORQUE IGUAL	{: RESULT = "3";:}
    |   MENORQUE IGUAL	{: RESULT = "4";:}
    |   IGUAL IGUAL			{: RESULT = "5";:}
    |   NOIGUAL IGUAL		{: RESULT = "6";:}
;

VALOR::=    NUMERO:a
						{:
								FuncionSubir fn = new FuncionSubir(1, a);
								RESULT = fn;
						:}
        |   CADENA:a
        		{:
								FuncionSubir fn = new FuncionSubir(2, a.replace("\"", ""));
								RESULT = fn;
						:}
        |   ID:a
        		{:
        				if(listaVariables.size() > 0){
        					for(int i = 0; i < listaVariables.size(); i++){
        						if(listaVariables.get(i).nombre.equals(a)){
        							FuncionSubir fn = new FuncionSubir(listaVariables.get(i).tipo, listaVariables.get(i).valor);
											RESULT = fn;
        							break;
        						}
        					}	
        				}else{
        					RESULT = null;
        				}
						:}
;



/*
Notas:

-En el FuncionSubir que usé para la función contarSi el 1 representa al numero y el 2 a la cadena



num < num
num > num
num <= num
num >= num
num | cad == num | cad
num | cad != num | cad


En las variables 1 numero 2 cadena 3 archivo
En las claves listado de claves 0 numero 1 cadena


*/